accountBalance:
    handler: functions/stripe/account-balance-handler.accountBalance
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/account/balance/{id}
              method: get
              cors: true
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

createSession:
    handler: functions/create-session-handler.createSession
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/session/create
              method: post
              cors: true
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

refundSale:
    handler: functions/refund-sale-handler.refundSale
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/sale/refund
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

redirectSaleBank:
    handler: functions/sale-bank-redirect-handler.redirectSaleBank
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/sale/redirect
              method: post
              cors: true
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

validateSession:
    handler: functions/validate-session.validateSession
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/session/validate
              method: post
              cors: true
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

sendPayByLink:
    handler: functions/send-pay-by-link.sendPayByLink
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/pay-by-link/send
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

sendOrderReceipt:
    handler: functions/send-order-receipt-handler.sendOrderReceipt
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/send-order-receipt
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

runStripePaymentReport:
    handler: functions/stripe/payment-report.runStripePaymentReport
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/run-stripe-payment-report/{merchantId}
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

fetchStripePaymentReport:
    handler: functions/stripe/payment-report.fetchStripePaymentReport
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/fetch-stripe-payment-report/{merchantId}/{reportId}
              method: get
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

fetchStripePayouts:
    handler: functions/stripe/payouts-service.fetchStripePayouts
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/fetch-stripe-payouts/{merchantId}
              method: get
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

fetchStripePayoutTransactions:
    handler: functions/stripe/payouts-service.fetchStripePayoutTransactions
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/fetch-stripe-payout-transactions/{merchantId}/{payoutId}
              method: get
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

GetPayouts:
    handler: functions/get-payouts-handler.getPayouts
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/get-payouts/{merchantId}
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

GetPayments:
    handler: functions/get-payments-handler.getPayments
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/get-payments/{merchantId}
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

GetDNAreporting:
    handler: functions/get-dna-report-handler.getDNAreport
    events:
        - http:
              path: ${self:custom.paymentEntityPath}/get-dna-report/{merchantId}
              method: post
              cors: true
              authorizer:
                  arn: ${ssm:/cp/${self:custom.infraStage}/cp/CognitoUserPoolArn}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

DNAReportingPublisher:
    handler: functions/dna-reporting-handler.dnaReportingData
    events:
        - schedule: rate(3 minutes)
    environment:
        DNA_REPORTING_QUEUE_FIFO_URL:
            'Fn::ImportValue': DNAReportingQueueFifoUrl-${self:custom.infraStage}

    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

DNAReportingConsumer:
    handler: functions/dna-reporting-consumer.main
    timeout: 150
    reservedConcurrency: 5
    events:
        - sqs:
              arn:
                  'Fn::ImportValue': DNAReportingQueueFifoArn-${self:custom.infraStage}
              batchSize: 10 # default 10 and maximum 10
    environment:
        DNA_REPORTING_QUEUE_FIFO_URL:
            'Fn::ImportValue': DNAReportingQueueFifoUrl-${self:custom.infraStage}
    layers:
        - ${ssm:/cp/${self:custom.infraStage}/cp/HelperlibLambdaLayerQualifiedArn}
        - ${ssm:/cp/${self:custom.infraStage}/cp/ModelslibLambdaLayerQualifiedArn}

DNAReportingDLQ:
    handler: functions/dna-reporting-dlq.main
    events:
        - sqs:
              arn:
                  'Fn::ImportValue': DNAReportingQueueFifoDLQArn-${self:custom.infraStage}
              batchSize: 10
